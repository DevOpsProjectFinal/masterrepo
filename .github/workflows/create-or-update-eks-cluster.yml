name: Deploy to EKS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up AWS CLI Credentials
      - name: Set up AWS CLI Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Verify EKS Cluster
      - name: Verify EKS Cluster
        id: verify-cluster
        run: |
          CLUSTER_STATUS=$(aws eks describe-cluster --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }} --query "cluster.status" --output text || echo "NOT_FOUND")
          echo "CLUSTER_EXISTS=$CLUSTER_STATUS" >> $GITHUB_ENV
          echo "Cluster Status: $CLUSTER_STATUS"

      # Step 4: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.8.4

      # Step 5: Terraform Init
      - name: Terraform Init
        run: terraform init -upgrade
        working-directory: ./terraform/eks-cluster

      # Step 6: Terraform Plan
      - name: Terraform Plan
        run: terraform plan
        working-directory: ./terraform/eks-cluster

      # Step 7: Terraform Apply
      - name: Terraform Apply
        run: |
          if [[ "$CLUSTER_EXISTS" == "NOT_FOUND" ]]; then
            echo "Cluster does not exist. Creating a new EKS cluster..."
            terraform apply -auto-approve
          else
            echo "Cluster exists. Updating the EKS cluster..."
            terraform apply -refresh-only -auto-approve
          fi
        working-directory: ./terraform/eks-cluster

      # Step 8: Extract Terraform Outputs
      - name: Extract Terraform Outputs
        id: outputs
        run: |
          echo "EKS_CLUSTER_NAME=$(terraform output -raw eks_cluster_name)" >> $GITHUB_ENV
          echo "REGION=$(terraform output -raw region)" >> $GITHUB_ENV
          echo "EKS_CLUSTER_ENDPOINT=$(terraform output -raw cluster_endpoint)" >> $GITHUB_ENV
          echo "EKS_CLUSTER_CA_DATA=$(terraform output -raw eks_cluster_certificate_authority_data)" >> $GITHUB_ENV
        working-directory: ./terraform/eks-cluster

      # Step 9: Generate kubeconfig
      - name: Generate kubeconfig
        run: |
          cat <<EOF > $GITHUB_WORKSPACE/kubeconfig
          apiVersion: v1
          clusters:
          - cluster:
              server: ${{ env.EKS_CLUSTER_ENDPOINT }}
              certificate-authority-data: ${{ env.EKS_CLUSTER_CA_DATA }}
            name: ${{ env.EKS_CLUSTER_NAME }}
          contexts:
          - context:
              cluster: ${{ env.EKS_CLUSTER_NAME }}
              user: aws
            name: ${{ env.EKS_CLUSTER_NAME }}
          current-context: ${{ env.EKS_CLUSTER_NAME }}
          kind: Config
          preferences: {}
          users:
          - name: aws
            user:
              exec:
                apiVersion: client.authentication.k8s.io/v1alpha1
                command: aws
                args:
                  - eks
                  - get-token
                  - --region
                  - ${{ env.REGION }}
                  - --cluster-name
                  - ${{ env.EKS_CLUSTER_NAME }}
                env: null
          EOF

      # Step 10: Apply Helm Release
      - name: Terraform Apply Helm Release
        run: terraform apply -auto-approve
        working-directory: ./terraform/eks-cluster

      # Step 11: Deploy Karpenter Provisioner
      - name: Deploy Karpenter Provisioner
        run: |
          kubectl apply -f ./kubernetes-manifests/karpenter-provisioner.yaml

      # Step 12: Deploy Backend API
      - name: Deploy Backend API
        run: |
          helm upgrade --install backend-api ./deployment/backend \
            --set image.repository=${{ env.ECR_REPO }}/backend-api \
            --set image.tag=latest

      # Step 13: Deploy Frontend UI
      - name: Deploy Frontend UI
        run: |
          helm upgrade --install frontend-ui ./deployment/frontend \
            --set image.repository=${{ env.ECR_REPO }}/frontend-ui \
            --set image.tag=latest
