name: Deploy to EKS

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggering of the workflow

jobs:
  eks-cluster:
    runs-on: ubuntu-latest
    outputs:
      cluster_exists: ${{ steps.verify-cluster.outputs.cluster_exists }}

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up AWS CLI Credentials
      - name: Set up AWS CLI Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Verify EKS Cluster
      - name: Verify EKS Cluster
        id: verify-cluster
        run: |
          CLUSTER_STATUS=$(aws eks describe-cluster --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }} --query "cluster.status" --output text || echo "NOT_FOUND")
          echo "cluster_exists=$CLUSTER_STATUS" >> $GITHUB_ENV
          echo "::set-output name=cluster_exists::$CLUSTER_STATUS"
          echo "Cluster Status: $CLUSTER_STATUS"

      # Step 4: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.8.4

      # Step 5: Terraform Init
      - name: Terraform Init
        if: ${{ steps.verify-cluster.outputs.cluster_exists == 'NOT_FOUND' }}
        run: terraform init -upgrade
        working-directory: ./terraform/eks-cluster

      # Step 6: Terraform Plan
      - name: Terraform Plan
        if: ${{ steps.verify-cluster.outputs.cluster_exists == 'NOT_FOUND' }}
        run: terraform plan -out=tfplan
        working-directory: ./terraform/eks-cluster

      # Step 7: Terraform Apply
      - name: Terraform Apply
        if: ${{ steps.verify-cluster.outputs.cluster_exists == 'NOT_FOUND' }}
        run: |
          echo "Cluster does not exist. Creating a new EKS cluster..."
          terraform apply -auto-approve tfplan
        working-directory: ./terraform/eks-cluster

      # Step 8: Extract Terraform Outputs
      - name: Extract Terraform Outputs
        run: |
          set -e
          echo "EKS_CLUSTER_NAME=$(terraform output -raw cluster_name)" >> $GITHUB_ENV
          echo "REGION=$(terraform output -raw region)" >> $GITHUB_ENV
          echo "EKS_CLUSTER_ENDPOINT=$(terraform output -raw cluster_endpoint)" >> $GITHUB_ENV
          echo "EKS_CLUSTER_CA_DATA=$(terraform output -raw cluster_certificate_authority_data)" >> $GITHUB_ENV
        working-directory: ./terraform/eks-cluster
        if: ${{ steps.verify-cluster.outputs.cluster_exists == 'NOT_FOUND' }}

  wait-for-approval:
    runs-on: ubuntu-latest
    needs: eks-cluster
    steps:
      - name: Wait for Manual Approval
        run: echo "Waiting for approval to deploy applications..."
        timeout-minutes: 1440  # Wait up to 24 hours for manual approval

  eks-cluster-deployments:
    runs-on: ubuntu-latest
    needs: [eks-cluster, wait-for-approval]

    steps:
      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --kubeconfig ~/.kube/config
          echo "KUBECONFIG=~/.kube/config" >> $GITHUB_ENV

      # Step 10: Deploy Backend API
      - name: Deploy Backend API
        run: |
          helm upgrade --install backend-api ./deployment/backend \
           --set image.repository=${{ env.ECR_REPO }}/backend-api \
           --set image.tag=latest --namespace fargate-applications --create-namespace
        env:
          KUBECONFIG: ~/.kube/config

      # Step 11: Deploy Frontend UI
      - name: Deploy Frontend UI
        run: |
          helm upgrade --install frontend-ui ./deployment/frontend \
            --set image.repository=${{ env.ECR_REPO }}/frontend-ui \
            --set image.tag=latest --namespace fargate-applications --create-namespace
        env:
          KUBECONFIG: ~/.kube/config