name: Master Repo CI/CD

on:
  push:
    branches:
      - main

jobs:
  update-submodules:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Set up SSH key for submodule access
      - name: SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}

      # Step 2: Checkout the master repository and submodules
      - name: Checkout Master Repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive' # Clone submodules recursively
          fetch-depth: 0          # Fetch all history for accurate submodule checkout
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      # Step 3: Update submodules
      - name: Update Submodules
        run: |
          git submodule update --remote --merge
          git add .
          git commit -m "Updated submodules" || echo "No changes to commit"

  build-and-push:
    needs: update-submodules
    runs-on: ubuntu-latest
    env:
      ECR_REPO: "796973482644.dkr.ecr.us-west-2.amazonaws.com"
    steps:
      # Step 1: Set up SSH key for submodule access
      - name: SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}
      
      # Step 2: Checkout the master repository again to get the latest code
      - name: Checkout Master Repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive' # Clone submodules recursively
          fetch-depth: 0          # Fetch all history for accurate submodule checkout
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Step 3: AWS CLI: Login to ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPO }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      # Step 4: Run Backend Unit Tests
      - name: Run Backend Unit Tests
        run: |
          cd backend-api
          # Assuming you're using npm or yarn for testing
          npm install
          npm test  # or your specific test command (e.g., jest, mocha)
      
      # Step 5: Run Frontend Unit Tests
      - name: Run Frontend Unit Tests
        run: |
          cd frontend-ui
          # Assuming you're using npm or yarn for testing
          npm install
          npm test  # or your specific test command (e.g., jest, mocha)

      # Step 6: Security Testing with Trivy (or other tools like Snyk)
      # - name: Run Security Tests with Trivy
      #   run: |
      #     # Install Trivy (Security Scanner for Docker images)
      #     curl -sfL https://github.com/aquasecurity/trivy/releases/download/v0.39.1/trivy_0.39.1_Linux-64bit.deb -o trivy.deb
      #     sudo dpkg -i trivy.deb
      # 
      #     # Build Docker images for scanning
      #     docker build -t ${ECR_REPO}/backend-api:latest ./backend-api
      #     docker build -t ${ECR_REPO}/frontend-ui:latest ./frontend-ui
      #    
      #    # Run Trivy to scan for vulnerabilities in the backend Docker image
      #     trivy image --no-progress --exit-code 1 --severity HIGH,CRITICAL ${ECR_REPO}/backend-api:latest
      # 
      #     # Run Trivy to scan for vulnerabilities in the frontend Docker image
      #     trivy image --no-progress --exit-code 1 --severity HIGH,CRITICAL ${ECR_REPO}/frontend-ui:latest

      # Step 7: Build Backend Docker Image
      - name: Build Backend Docker Image
        run: |
          docker build -t ${ECR_REPO}/backend-api:latest ./backend-api
          docker push ${ECR_REPO}/backend-api:latest

      # Step 8: Build Frontend Docker Image
      - name: Build Frontend Docker Image
        run: |
          docker build -t ${ECR_REPO}/frontend-ui:latest ./frontend-ui
          docker push ${ECR_REPO}/frontend-ui:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      # Step 1: Set up AWS credentials for EKS
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 2: Clone the master repository
      - name: Checkout Master Repository
        uses: actions/checkout@v3
        with:
          repository: DevOpsProjectFinal/masterrepo
          submodules: 'recursive'
          fetch-depth: 0
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Step 3: Debug to verify repository contents
      - name: Debug Repository Contents
        run: |
          echo "Current Directory: $(pwd)"
          ls -lR ${{ github.workspace }}

      # Step 4: Configure kubectl for EKS
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      # Step 5: Install Helm
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      # Step 6: Deploy Backend API to EKS
      - name: Deploy Backend API
        run: |
          helm upgrade --install backend-api ${{ github.workspace }}/deployment/backend \
            --set image.repository=${{ env.ECR_REPO }}/backend-api \
            --set image.tag=latest \
            --debug

      # Step 7: Deploy Frontend UI to EKS
      - name: Deploy Frontend UI
        run: |
          helm upgrade --install frontend-ui ${{ github.workspace }}/deployment/frontend \
            --set image.repository=${{ env.ECR_REPO }}/frontend-ui \
            --set image.tag=latest \
            --debug